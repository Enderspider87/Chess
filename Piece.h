//
//  Piece.h
//  Chess Game
//
//  Created by Wade Sultan on 7/14/22.
//


#ifndef Piece_h
#define Piece_h
#include <string>
#include <vector>
#include <tuple>
#include "Player.h"
using namespace std;

// These constants denote the starting positions of the kings. The king must not have moved to castle. 
const string WHITE_KING_START = "e1";
const string BLACK_KING_START = "e8";

// A pawn must be on the correct row to see if en passant is legal. Otherwise, no need to investigate further.
const int WHITE_EN_PASSANT_CHECK = 4;
const int BLACK_EN_PASSANT_CHECK = 3;

class Piece {
public:
    Piece(char pColor): m_pieceColor(pColor){} // Initializer for a piece
    virtual ~Piece(){} // Destructor
    
    virtual string getPiece() = 0; // String to allow for Unicode chess characters
    
    virtual string getName() = 0; // We use this to display capturable pieces (ex. Black Pawn on g6)
    
    virtual bool isSquareValid(Piece* bd[8][8], Player* pb[2], char pTurn, int iRank, int iFile, int fRank, int fFile) = 0; // Determines if, given an initial square, a certain other square is valid for the given piece to move to.
    
    bool isValidMove(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile, char pTurn);
    // This determines if the move is valid. It is false if isSquareValid is false, and will also return false if the move in question would put the corresponding king into check. Otherwise, it returns true.
    
    virtual bool inCheck(Piece* bd[8][8], Player* pb[2], char pTurn, int exemptRank, int exemptFile) = 0;
    // Checks every opposite color piece to see if a move from their square to the king's square is valid.
    
    virtual bool isEnPassantLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile) = 0;
    // Evaluates if en passant is legal.
    
    virtual bool isCastleLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile, char pTurn) = 0;
    // Determines if castling is legal.
    
    void promotePawn(Piece* bd[8][8], char newPieceType, int rank, int file);
    // Promotes the pawn.

    bool hasLegalMove(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, char pTurn);
    // Checks a piece to see if any move is valid (i.e. isValidMove returns true at least once)
    
    bool isLegalMove(Piece* bd[8][8], int iRank, int iFile, int fRank, int fFile);
    // This checks a destination square entered by the user against a vector of legal moves generated by the isValidMove function.
    
    void addLegalMove(string sq){
        legalMove.push_back(sq);
    } // Adds a legal move to the vector of legal moves for a given piece.
    vector<tuple<string, string, int>> getMoveHist(){
        return pieceMoveHist;
    }
    
    void eraseLegalMoves(){
        legalMove.clear();
    } // Clears legal moves.
    
    void addMoveToHist(string startPos, string endPos, int moveNum){
        pieceMoveHist.emplace_back(startPos, endPos, moveNum);
    } // When a piece moves, the move is stored in this vector.
    
    bool pieceHasMoved(){
        return !pieceMoveHist.empty();
    } // Used to check if castling is legal.
    
    vector<string> getLegalMoves(){
        return legalMove;
    } // getter function
    
    vector<string>::size_type numLegalMoves(){
        return legalMove.size();
    } // getter function
    
    char getColor(){
        return m_pieceColor;
    } // getter function
private:
    vector<string> legalMove;
    char m_pieceColor;
    
    vector<tuple<string, string, int>> pieceMoveHist;
    // In order: starting position, finishing position, move number
    
    // For castling: the king and rook must have empty maps. Do not bother checking if the rook has an empty map if the king does not (the king has moved, the player cannot castle).
    // For en passant: the pawn to be captured must have one move, which is forward two squares, and its move number must equal the game move count (meaning it just moved).
};

class Pawn: public Piece {
public:
    Pawn(char pColor): Piece(pColor){}
    virtual ~Pawn(){}
    virtual bool isSquareValid(Piece* bd[8][8], Player* pb[2], char pTurn, int iRank, int iFile, int fRank, int fFile);
    virtual bool inCheck(Piece* bd[8][8], Player* pb[2], char pTurn, int exemptRank, int exemptFile){
        return false;
    }
    virtual bool isEnPassantLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile);
    virtual bool isCastleLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile, char pTurn){
        return false;
    }
    virtual string getName(){
        return "Pawn";
    }
    virtual string getPiece(){
        if (getColor() == 'W')
            return "♟";
        else
            return "♙";
    }
private:
};

class Rook: public Piece {
public:
    Rook(char pColor): Piece(pColor){}
    virtual ~Rook(){}
    virtual bool isSquareValid(Piece* bd[8][8], Player* pb[2], char pTurn, int iRank, int iFile, int fRank, int fFile);
    virtual bool inCheck(Piece* bd[8][8], Player* pb[2], char pTurn, int exemptRank, int exemptFile){
        return false;
    }
    virtual bool isEnPassantLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile){
        return false;
    }
    virtual bool isCastleLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile, char pTurn){
        return false; // We evaluate if castling is legal on the king, so there is no need to check here.
    }
    virtual string getName(){
        return "Rook";
    }
    virtual string getPiece(){
        if (getColor() == 'W')
            return "♜";
        else
            return "♖";
    }
private:
};

class Knight: public Piece {
public:
    Knight(char pColor): Piece(pColor){}
    virtual ~Knight(){}
    virtual bool isSquareValid(Piece* bd[8][8], Player* pb[2], char pTurn, int iRank, int iFile, int fRank, int fFile);
    virtual bool inCheck(Piece* bd[8][8], Player* pb[2], char pTurn, int exemptRank, int exemptFile){
        return false;
    }
    virtual bool isEnPassantLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile){
        return false;
    }
    virtual bool isCastleLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile, char pTurn){
        return false;
    }
    virtual string getName(){
        return "Knight";
    }
    virtual string getPiece(){
        if (getColor() == 'W')
            return "♞";
        else
            return "♘";
    }
private:
};

class Bishop: public Piece {
public:
    Bishop(char pColor): Piece(pColor){}
    virtual ~Bishop(){}
    virtual bool isSquareValid(Piece* bd[8][8], Player* pb[2], char pTurn, int iRank, int iFile, int fRank, int fFile);
    virtual bool inCheck(Piece* bd[8][8], Player* pb[2], char pTurn, int exemptRank, int exemptFile){
        return false;
    }
    virtual bool isEnPassantLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile){
        return false;
    }
    virtual bool isCastleLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile, char pTurn){
        return false;
    }
    virtual string getName(){
        return "Bishop";
    }
    virtual string getPiece(){
        if (getColor() == 'W')
            return "♝";
        else
            return "♗";
    }
private:
};

class Queen: public Piece {
public:
    Queen(char pColor): Piece(pColor){}
    virtual ~Queen(){}
    virtual bool isSquareValid(Piece* bd[8][8], Player* pb[2], char pTurn, int iRank, int iFile, int fRank, int fFile);
    virtual bool inCheck(Piece* bd[8][8], Player* pb[2], char pTurn, int exemptRank, int exemptFile){
        return false;
    }
    virtual bool isEnPassantLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile){
        return false;
    }
    virtual bool isCastleLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile, char pTurn){
        return false;
    }
    virtual string getName(){
        return "Queen";
    }
    virtual string getPiece(){
        if (getColor() == 'W')
            return "♛";
        else
            return "♕";
    }
private:
};

class King: public Piece {
public:
    King(char pColor): Piece(pColor){}
    virtual ~King(){}
    virtual bool isSquareValid(Piece* bd[8][8], Player* pb[2], char pTurn, int iRank, int iFile, int fRank, int fFile);
    virtual string getName(){ // If the capturable piece has the name "King", the player is in check.
        return "King";
    }
    virtual bool isEnPassantLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile){
        return false;
    }
    virtual bool isCastleLegal(Piece* bd[8][8], Player* pb[2], int iRank, int iFile, int fRank, int fFile, char pTurn);
    virtual string getPiece(){
        if (getColor() == 'W')
            return "♚";
        else
            return "♔";
    }
    virtual bool inCheck(Piece* bd[8][8], Player* pb[2], char pTurn, int exemptRank, int exemptFile);
private:
};

#endif /* Piece_h */
